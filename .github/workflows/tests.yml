name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.2, 8.3]
        symfony-version: [7.0.*]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: crypto_investment_tracker_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo
        coverage: xdebug

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Create test environment file
      run: |
        cp .env .env.local
        echo "APP_ENV=test" >> .env.local
        echo "DATABASE_URL=mysql://root:root@127.0.0.1:3306/crypto_investment_tracker_test" >> .env.local
        echo "STRIPE_PUBLIC_KEY=pk_test_fake" >> .env.local
        echo "STRIPE_SECRET_KEY=sk_test_fake" >> .env.local
        echo "STRIPE_WEBHOOK_SECRET=whsec_test_fake" >> .env.local

    - name: Create database
      run: php bin/console doctrine:database:create --env=test --if-not-exists

    - name: Run migrations
      run: php bin/console doctrine:migrations:migrate --env=test --no-interaction

    - name: Clear cache
      run: php bin/console cache:clear --env=test

    - name: Run PHPStan
      run: vendor/bin/phpstan analyse --memory-limit=2G

    - name: Run PHP CS Fixer
      run: vendor/bin/php-cs-fixer fix --dry-run --diff --verbose

    - name: Run unit tests
      run: php bin/phpunit --testsuite=unit --coverage-clover=var/coverage/clover.xml

    - name: Run integration tests
      run: php bin/phpunit --testsuite=integration

    - name: Run functional tests
      run: php bin/phpunit --testsuite=functional

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: var/coverage/clover.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Run security audit
      run: composer audit

    - name: Run Snyk security scan
      uses: snyk/actions/php@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  performance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Create test environment file
      run: |
        cp .env .env.local
        echo "APP_ENV=test" >> .env.local
        echo "DATABASE_URL=sqlite:///:memory:" >> .env.local

    - name: Run performance tests
      run: php bin/phpunit --testsuite=performance

  e2e:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Create test environment file
      run: |
        cp .env .env.local
        echo "APP_ENV=test" >> .env.local
        echo "DATABASE_URL=sqlite:///:memory:" >> .env.local

    - name: Run E2E tests
      run: php bin/phpunit --testsuite=e2e

  accessibility:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Run accessibility tests
      run: npm run test:accessibility

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, security, performance, e2e, accessibility]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Run SonarQube analysis
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
